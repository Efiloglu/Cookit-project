{"ast":null,"code":"var _jsxFileName = \"/home/hyfbe32/cookit-auth/src/components/SecurityTab/SecurityTab.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport validate from 'validate.js';\nimport moment from 'moment';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport Hidden from '@material-ui/core/Hidden';\nimport TextField from '@material-ui/core/TextField';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport IconButton from '@material-ui/core/IconButton';\nimport LockIcon from '@material-ui/icons/Lock';\nimport EditIcon from '@material-ui/icons/Edit';\nimport constraints from '../../constraints';\nimport authentication from '../../services/authentication';\nconst initialState = {\n  showingField: '',\n  password: '',\n  passwordConfirmation: '',\n  performingAction: false,\n  errors: null\n};\n\nclass SecurityTab extends Component {\n  constructor(props) {\n    super(props);\n\n    this.showField = fieldId => {\n      if (!fieldId) {\n        return;\n      }\n\n      this.setState({\n        showingField: fieldId\n      });\n    };\n\n    this.hideFields = callback => {\n      this.setState({\n        showingField: '',\n        password: '',\n        passwordConfirmation: '',\n        errors: null\n      }, () => {\n        if (callback && typeof callback === 'function') {\n          callback();\n        }\n      });\n    };\n\n    this.changeField = fieldId => {\n      switch (fieldId) {\n        case 'password':\n          const password = this.state.password;\n          const errors = validate({\n            password: password\n          }, {\n            password: constraints.password\n          });\n\n          if (errors) {\n            this.setState({\n              errors: errors\n            });\n            return;\n          }\n\n          this.setState({\n            errors: null\n          }, () => {\n            this.showField('password-confirmation');\n          });\n          return;\n\n        case 'password-confirmation':\n          this.changePassword();\n          return;\n\n        default:\n          return;\n      }\n    };\n\n    this.changePassword = () => {\n      const _this$state = this.state,\n            password = _this$state.password,\n            passwordConfirmation = _this$state.passwordConfirmation;\n      const errors = validate({\n        password: password,\n        passwordConfirmation: passwordConfirmation\n      }, {\n        password: constraints.password,\n        passwordConfirmation: constraints.passwordConfirmation\n      });\n\n      if (errors) {\n        this.setState({\n          errors: errors\n        });\n        return;\n      }\n\n      this.setState({\n        errors: null\n      }, () => {\n        this.setState({\n          performingAction: true\n        }, () => {\n          authentication.changePassword(password).then(() => {\n            this.hideFields(() => {\n              this.props.openSnackbar('Changed password');\n            });\n          }).catch(reason => {\n            const code = reason.code;\n            const message = reason.message;\n\n            switch (code) {\n              default:\n                this.props.openSnackbar(message);\n                return;\n            }\n          }).finally(() => {\n            this.setState({\n              performingAction: false\n            });\n          });\n        });\n      });\n    };\n\n    this.handleKeyDown = (event, fieldId) => {\n      if (!event || !fieldId) {\n        return;\n      }\n\n      if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey) {\n        return;\n      }\n\n      const key = event.key;\n\n      if (!key) {\n        return;\n      }\n\n      if (key === 'Escape') {\n        this.hideFields();\n      } else if (key === 'Enter') {\n        this.changeField(fieldId);\n      }\n    };\n\n    this.handlePasswordChange = event => {\n      if (!event) {\n        return;\n      }\n\n      const password = event.target.value;\n      this.setState({\n        password: password\n      });\n    };\n\n    this.handlePasswordConfirmationChange = event => {\n      if (!event) {\n        return;\n      }\n\n      const passwordConfirmation = event.target.value;\n      this.setState({\n        passwordConfirmation: passwordConfirmation\n      });\n    };\n\n    this.state = initialState;\n  }\n\n  render() {\n    // Properties\n    const userData = this.props.userData;\n    const _this$state2 = this.state,\n          showingField = _this$state2.showingField,\n          password = _this$state2.password,\n          passwordConfirmation = _this$state2.passwordConfirmation,\n          performingAction = _this$state2.performingAction,\n          errors = _this$state2.errors;\n    const hasChangedPassword = userData && userData.lastPasswordChange;\n    return React.createElement(DialogContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }, React.createElement(List, {\n      disablePadding: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, React.createElement(ListItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, React.createElement(Hidden, {\n      xsDown: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, React.createElement(ListItemIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, React.createElement(LockIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }))), showingField === 'password' && React.createElement(TextField, {\n      autoComplete: \"new-password\",\n      autoFocus: true,\n      disabled: performingAction,\n      error: !!(errors && errors.password),\n      fullWidth: true,\n      helperText: errors && errors.password ? errors.password[0] : 'Press Enter to change your password',\n      label: \"Password\",\n      required: true,\n      type: \"password\",\n      value: password,\n      variant: \"filled\",\n      onBlur: this.hideFields,\n      onKeyDown: event => this.handleKeyDown(event, 'password'),\n      onChange: this.handlePasswordChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }), showingField === 'password-confirmation' && React.createElement(TextField, {\n      autoComplete: \"new-password\",\n      autoFocus: true,\n      disabled: performingAction,\n      error: !!(errors && errors.passwordConfirmation),\n      fullWidth: true,\n      helperText: errors && errors.passwordConfirmation ? errors.passwordConfirmation[0] : 'Press Enter to change your password',\n      label: \"Password confirmation\",\n      required: true,\n      type: \"password\",\n      value: passwordConfirmation,\n      variant: \"filled\",\n      onBlur: this.hideFields,\n      onKeyDown: event => this.handleKeyDown(event, 'password-confirmation'),\n      onChange: this.handlePasswordConfirmationChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }), showingField !== 'password' && showingField !== 'password-confirmation' && React.createElement(React.Fragment, null, React.createElement(Hidden, {\n      xsDown: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }, React.createElement(ListItemText, {\n      primary: \"Password\",\n      secondary: hasChangedPassword ? \"Last changed \".concat(moment(userData.lastPasswordChange.toDate()).format('LL')) : 'Never changed',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    })), React.createElement(Hidden, {\n      smUp: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    }, React.createElement(ListItemText, {\n      primary: \"Password\",\n      secondary: hasChangedPassword ? \"Last changed \".concat(moment(userData.lastPasswordChange.toDate()).format('ll')) : 'Never changed',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    })), React.createElement(ListItemSecondaryAction, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283\n      },\n      __self: this\n    }, React.createElement(Tooltip, {\n      title: \"Change\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285\n      },\n      __self: this\n    }, React.createElement(IconButton, {\n      disabled: performingAction,\n      onClick: () => this.showField('password'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286\n      },\n      __self: this\n    }, React.createElement(EditIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    })))))))));\n  }\n\n}\n\nSecurityTab.propTypes = {\n  // Properties\n  userData: PropTypes.object,\n  // Functions\n  openSnackbar: PropTypes.func.isRequired\n};\nexport default SecurityTab;","map":{"version":3,"sources":["/home/hyfbe32/cookit-auth/src/components/SecurityTab/SecurityTab.js"],"names":["React","Component","PropTypes","validate","moment","DialogContent","List","ListItem","ListItemIcon","ListItemText","ListItemSecondaryAction","Hidden","TextField","Tooltip","IconButton","LockIcon","EditIcon","constraints","authentication","initialState","showingField","password","passwordConfirmation","performingAction","errors","SecurityTab","constructor","props","showField","fieldId","setState","hideFields","callback","changeField","state","changePassword","then","openSnackbar","catch","reason","code","message","finally","handleKeyDown","event","altKey","ctrlKey","metaKey","shiftKey","key","handlePasswordChange","target","value","handlePasswordConfirmationChange","render","userData","hasChangedPassword","lastPasswordChange","toDate","format","propTypes","object","func","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\n\nimport PropTypes from 'prop-types'\n\nimport validate from 'validate.js';\nimport moment from 'moment';\n\nimport DialogContent from '@material-ui/core/DialogContent';\n\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\n\nimport Hidden from '@material-ui/core/Hidden';\nimport TextField from '@material-ui/core/TextField';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport IconButton from '@material-ui/core/IconButton';\n\nimport LockIcon from '@material-ui/icons/Lock';\nimport EditIcon from '@material-ui/icons/Edit';\n\nimport constraints from '../../constraints';\nimport authentication from '../../services/authentication';\n\nconst initialState = {\n  showingField: '',\n\n  password: '',\n  passwordConfirmation: '',\n\n  performingAction: false,\n\n  errors: null\n};\n\nclass SecurityTab extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = initialState;\n  }\n\n  showField = (fieldId) => {\n    if (!fieldId) {\n      return;\n    }\n\n    this.setState({\n      showingField: fieldId\n    });\n  };\n\n  hideFields = (callback) => {\n    this.setState({\n      showingField: '',\n\n      password: '',\n      passwordConfirmation: '',\n\n      errors: null\n    }, () => {\n      if (callback && typeof callback === 'function') {\n        callback();\n      }\n    });\n  };\n\n  changeField = (fieldId) => {\n    switch (fieldId) {\n      case 'password':\n        const { password } = this.state;\n\n        const errors = validate({\n          password: password\n        }, {\n          password: constraints.password\n        });\n\n        if (errors) {\n          this.setState({\n            errors: errors\n          });\n\n          return;\n        }\n\n        this.setState({\n          errors: null\n        }, () => {\n          this.showField('password-confirmation');\n        });\n        return;\n\n      case 'password-confirmation':\n        this.changePassword();\n        return;\n\n      default:\n        return;\n    }\n  };\n\n  changePassword = () => {\n    const { password, passwordConfirmation } = this.state;\n\n    const errors = validate({\n      password: password,\n      passwordConfirmation: passwordConfirmation\n    }, {\n      password: constraints.password,\n      passwordConfirmation: constraints.passwordConfirmation\n    });\n\n    if (errors) {\n      this.setState({\n        errors: errors\n      });\n\n      return;\n    }\n\n    this.setState({\n      errors: null\n    }, () => {\n      this.setState({\n        performingAction: true\n      }, () => {\n        authentication.changePassword(password).then(() => {\n          this.hideFields(() => {\n            this.props.openSnackbar('Changed password');\n          });\n        }).catch((reason) => {\n          const code = reason.code;\n          const message = reason.message;\n\n          switch (code) {\n            default:\n              this.props.openSnackbar(message);\n              return;\n          }\n        }).finally(() => {\n          this.setState({\n            performingAction: false\n          });\n        });\n      });\n    });\n  };\n\n  handleKeyDown = (event, fieldId) => {\n    if (!event || !fieldId) {\n      return;\n    }\n\n    if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey) {\n      return;\n    }\n\n    const key = event.key;\n\n    if (!key) {\n      return;\n    }\n\n    if (key === 'Escape') {\n      this.hideFields();\n    } else if (key === 'Enter') {\n      this.changeField(fieldId);\n    }\n  };\n\n  handlePasswordChange = (event) => {\n    if (!event) {\n      return;\n    }\n\n    const password = event.target.value;\n\n    this.setState({\n      password: password\n    });\n  };\n\n  handlePasswordConfirmationChange = (event) => {\n    if (!event) {\n      return;\n    }\n\n    const passwordConfirmation = event.target.value;\n\n    this.setState({\n      passwordConfirmation: passwordConfirmation\n    });\n  };\n\n  render() {\n    // Properties\n    const { userData } = this.props;\n\n    const {\n      showingField,\n\n      password,\n      passwordConfirmation,\n\n      performingAction,\n\n      errors\n    } = this.state;\n\n    const hasChangedPassword = userData && userData.lastPasswordChange;\n\n    return (\n      <DialogContent>\n        <List disablePadding>\n          <ListItem>\n            <Hidden xsDown>\n              <ListItemIcon>\n                <LockIcon />\n              </ListItemIcon>\n            </Hidden>\n\n            {showingField === 'password' &&\n              <TextField\n                autoComplete=\"new-password\"\n                autoFocus\n                disabled={performingAction}\n                error={!!(errors && errors.password)}\n                fullWidth\n                helperText={(errors && errors.password) ? errors.password[0] : 'Press Enter to change your password'}\n                label=\"Password\"\n                required\n                type=\"password\"\n                value={password}\n                variant=\"filled\"\n\n                onBlur={this.hideFields}\n                onKeyDown={(event) => this.handleKeyDown(event, 'password')}\n\n                onChange={this.handlePasswordChange}\n              />\n            }\n\n            {showingField === 'password-confirmation' &&\n              <TextField\n                autoComplete=\"new-password\"\n                autoFocus\n                disabled={performingAction}\n                error={!!(errors && errors.passwordConfirmation)}\n                fullWidth\n                helperText={(errors && errors.passwordConfirmation) ? errors.passwordConfirmation[0] : 'Press Enter to change your password'}\n                label=\"Password confirmation\"\n                required\n                type=\"password\"\n                value={passwordConfirmation}\n                variant=\"filled\"\n\n                onBlur={this.hideFields}\n                onKeyDown={(event) => this.handleKeyDown(event, 'password-confirmation')}\n\n                onChange={this.handlePasswordConfirmationChange}\n              />\n            }\n\n            {(showingField !== 'password' && showingField !== 'password-confirmation') &&\n              <>\n                <Hidden xsDown>\n                  <ListItemText\n                    primary=\"Password\"\n                    secondary={hasChangedPassword ? `Last changed ${moment(userData.lastPasswordChange.toDate()).format('LL')}` : 'Never changed'}\n                  />\n                </Hidden>\n\n                <Hidden smUp>\n                  <ListItemText\n                    primary=\"Password\"\n                    secondary={hasChangedPassword ? `Last changed ${moment(userData.lastPasswordChange.toDate()).format('ll')}` : 'Never changed'}\n                  />\n                </Hidden>\n\n                <ListItemSecondaryAction>\n                  <Tooltip title=\"Change\">\n                    <div>\n                      <IconButton disabled={performingAction} onClick={() => this.showField('password')}>\n                        <EditIcon />\n                      </IconButton>\n                    </div>\n                  </Tooltip>\n                </ListItemSecondaryAction>\n              </>\n            }\n          </ListItem>\n        </List>\n      </DialogContent>\n    )\n  }\n}\n\nSecurityTab.propTypes = {\n  // Properties\n  userData: PropTypes.object,\n\n  // Functions\n  openSnackbar: PropTypes.func.isRequired\n};\n\nexport default SecurityTab;\n"]},"metadata":{},"sourceType":"module"}
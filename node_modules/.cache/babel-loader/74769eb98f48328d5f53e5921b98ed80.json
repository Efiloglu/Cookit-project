{"ast":null,"code":"var _jsxFileName = \"/home/hyfbe32/cookit-auth/src/components/SignUpDialog/SignUpDialog.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport validate from 'validate.js';\nimport { withStyles } from '@material-ui/core/styles';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Hidden from '@material-ui/core/Hidden';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport Divider from '@material-ui/core/Divider';\nimport TextField from '@material-ui/core/TextField';\nimport AuthProviderList from '../AuthProviderList';\nimport constraints from '../../constraints';\nimport authentication from '../../services/authentication';\n\nconst styles = theme => ({\n  dialogContent: {\n    overflowY: 'hidden'\n  },\n  icon: {\n    marginRight: theme.spacing(0.5)\n  },\n  divider: {\n    margin: 'auto'\n  },\n  grid: {\n    marginBottom: theme.spacing(2)\n  }\n});\n\nconst initialState = {\n  performingAction: false,\n  emailAddress: '',\n  emailAddressConfirmation: '',\n  password: '',\n  passwordConfirmation: '',\n  errors: null\n};\n\nclass SignUpDialog extends Component {\n  constructor(props) {\n    super(props);\n\n    this.signUp = () => {\n      const _this$state = this.state,\n            emailAddress = _this$state.emailAddress,\n            emailAddressConfirmation = _this$state.emailAddressConfirmation,\n            password = _this$state.password,\n            passwordConfirmation = _this$state.passwordConfirmation;\n      const errors = validate({\n        emailAddress: emailAddress,\n        emailAddressConfirmation: emailAddressConfirmation,\n        password: password,\n        passwordConfirmation: passwordConfirmation\n      }, {\n        emailAddress: constraints.emailAddress,\n        emailAddressConfirmation: constraints.emailAddressConfirmation,\n        password: constraints.password,\n        passwordConfirmation: constraints.passwordConfirmation\n      });\n\n      if (errors) {\n        this.setState({\n          errors: errors\n        });\n      } else {\n        this.setState({\n          performingAction: true,\n          errors: null\n        }, () => {\n          authentication.signUpWithEmailAddressAndPassword(emailAddress, password).then(value => {\n            this.props.dialogProps.onClose();\n          }).catch(reason => {\n            const code = reason.code;\n            const message = reason.message;\n\n            switch (code) {\n              case 'auth/email-already-in-use':\n              case 'auth/invalid-email':\n              case 'auth/operation-not-allowed':\n              case 'auth/weak-password':\n                this.props.openSnackbar(message);\n                return;\n\n              default:\n                this.props.openSnackbar(message);\n                return;\n            }\n          }).finally(() => {\n            this.setState({\n              performingAction: false\n            });\n          });\n        });\n      }\n    };\n\n    this.signInWithAuthProvider = providerId => {\n      this.setState({\n        performingAction: true\n      }, () => {\n        authentication.signInWithAuthProvider(providerId).then(value => {\n          this.props.dialogProps.onClose(() => {\n            const user = value.user;\n            const displayName = user.displayName;\n            const emailAddress = user.email;\n            this.props.openSnackbar(\"Signed in as \".concat(displayName || emailAddress));\n          });\n        }).catch(reason => {\n          const code = reason.code;\n          const message = reason.message;\n\n          switch (code) {\n            case 'auth/account-exists-with-different-credential':\n            case 'auth/auth-domain-config-required':\n            case 'auth/cancelled-popup-request':\n            case 'auth/operation-not-allowed':\n            case 'auth/operation-not-supported-in-this-environment':\n            case 'auth/popup-blocked':\n            case 'auth/popup-closed-by-user':\n            case 'auth/unauthorized-domain':\n              this.props.openSnackbar(message);\n              return;\n\n            default:\n              this.props.openSnackbar(message);\n              return;\n          }\n        }).finally(() => {\n          this.setState({\n            performingAction: false\n          });\n        });\n      });\n    };\n\n    this.handleKeyPress = event => {\n      const _this$state2 = this.state,\n            emailAddress = _this$state2.emailAddress,\n            emailAddressConfirmation = _this$state2.emailAddressConfirmation,\n            password = _this$state2.password,\n            passwordConfirmation = _this$state2.passwordConfirmation;\n\n      if (!emailAddress || !emailAddressConfirmation || !password || !passwordConfirmation) {\n        return;\n      }\n\n      const key = event.key;\n\n      if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey) {\n        return;\n      }\n\n      if (key === 'Enter') {\n        this.signUp();\n      }\n    };\n\n    this.handleExited = () => {\n      this.setState(initialState);\n    };\n\n    this.handleEmailAddressChange = event => {\n      const emailAddress = event.target.value;\n      this.setState({\n        emailAddress: emailAddress\n      });\n    };\n\n    this.handleEmailAddressConfirmationChange = event => {\n      const emailAddressConfirmation = event.target.value;\n      this.setState({\n        emailAddressConfirmation: emailAddressConfirmation\n      });\n    };\n\n    this.handlePasswordChange = event => {\n      const password = event.target.value;\n      this.setState({\n        password: password\n      });\n    };\n\n    this.handlePasswordConfirmationChange = event => {\n      const passwordConfirmation = event.target.value;\n      this.setState({\n        passwordConfirmation: passwordConfirmation\n      });\n    };\n\n    this.state = initialState;\n  }\n\n  render() {\n    // Styling\n    const classes = this.props.classes; // Dialog Properties\n\n    const dialogProps = this.props.dialogProps;\n    const _this$state3 = this.state,\n          performingAction = _this$state3.performingAction,\n          emailAddress = _this$state3.emailAddress,\n          emailAddressConfirmation = _this$state3.emailAddressConfirmation,\n          password = _this$state3.password,\n          passwordConfirmation = _this$state3.passwordConfirmation,\n          errors = _this$state3.errors;\n    return React.createElement(Dialog, Object.assign({\n      fullWidth: true,\n      maxWidth: \"sm\"\n    }, dialogProps, {\n      onKeyPress: this.handleKeyPress,\n      onExited: this.handleExited,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }), React.createElement(DialogTitle, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, \"Sign up for an account\"), React.createElement(Hidden, {\n      smDown: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }, React.createElement(DialogContent, {\n      className: classes.dialogContent,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      container: true,\n      direction: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }, React.createElement(AuthProviderList, {\n      performingAction: performingAction,\n      onAuthProviderClick: this.signInWithAuthProvider,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      item: true,\n      xs: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255\n      },\n      __self: this\n    }, React.createElement(Divider, {\n      className: classes.divider,\n      orientation: \"vertical\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      item: true,\n      xs: 7,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      container: true,\n      direction: \"column\",\n      spacing: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, React.createElement(TextField, {\n      autoComplete: \"email\",\n      disabled: performingAction,\n      error: !!(errors && errors.emailAddress),\n      fullWidth: true,\n      helperText: errors && errors.emailAddress ? errors.emailAddress[0] : '',\n      label: \"E-mail address\",\n      placeholder: \"john@doe.com\",\n      required: true,\n      type: \"email\",\n      value: emailAddress,\n      variant: \"outlined\",\n      onChange: this.handleEmailAddressChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      item: true,\n      xs: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    }, React.createElement(TextField, {\n      autoComplete: \"email\",\n      disabled: performingAction,\n      error: !!(errors && errors.emailAddressConfirmation),\n      fullWidth: true,\n      helperText: errors && errors.emailAddressConfirmation ? errors.emailAddressConfirmation[0] : '',\n      label: \"E-mail address confirmation\",\n      placeholder: \"john@doe.com\",\n      required: true,\n      type: \"email\",\n      value: emailAddressConfirmation,\n      variant: \"outlined\",\n      onChange: this.handleEmailAddressConfirmationChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      item: true,\n      xs: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297\n      },\n      __self: this\n    }, React.createElement(TextField, {\n      autoComplete: \"new-password\",\n      disabled: performingAction,\n      error: !!(errors && errors.password),\n      fullWidth: true,\n      helperText: errors && errors.password ? errors.password[0] : '',\n      label: \"Password\",\n      placeholder: \"\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\",\n      required: true,\n      type: \"password\",\n      value: password,\n      variant: \"outlined\",\n      onChange: this.handlePasswordChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      item: true,\n      xs: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }, React.createElement(TextField, {\n      autoComplete: \"password\",\n      disabled: performingAction,\n      error: !!(errors && errors.passwordConfirmation),\n      fullWidth: true,\n      helperText: errors && errors.passwordConfirmation ? errors.passwordConfirmation[0] : '',\n      label: \"Password confirmation\",\n      placeholder: \"\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\",\n      required: true,\n      type: \"password\",\n      value: passwordConfirmation,\n      variant: \"outlined\",\n      onChange: this.handlePasswordConfirmationChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316\n      },\n      __self: this\n    }))))))), React.createElement(Hidden, {\n      mdUp: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338\n      },\n      __self: this\n    }, React.createElement(DialogContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339\n      },\n      __self: this\n    }, React.createElement(AuthProviderList, {\n      gutterBottom: true,\n      performingAction: performingAction,\n      onAuthProviderClick: this.signInWithAuthProvider,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340\n      },\n      __self: this\n    }), React.createElement(Grid, {\n      container: true,\n      direction: \"column\",\n      spacing: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348\n      },\n      __self: this\n    }, React.createElement(TextField, {\n      autoComplete: \"email\",\n      disabled: performingAction,\n      error: !!(errors && errors.emailAddress),\n      fullWidth: true,\n      helperText: errors && errors.emailAddress ? errors.emailAddress[0] : '',\n      label: \"E-mail address\",\n      placeholder: \"john@doe.com\",\n      required: true,\n      type: \"email\",\n      value: emailAddress,\n      variant: \"outlined\",\n      onChange: this.handleEmailAddressChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      item: true,\n      xs: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366\n      },\n      __self: this\n    }, React.createElement(TextField, {\n      autoComplete: \"email\",\n      disabled: performingAction,\n      error: !!(errors && errors.emailAddressConfirmation),\n      fullWidth: true,\n      helperText: errors && errors.emailAddressConfirmation ? errors.emailAddressConfirmation[0] : '',\n      label: \"E-mail address confirmation\",\n      placeholder: \"john@doe.com\",\n      required: true,\n      type: \"email\",\n      value: emailAddressConfirmation,\n      variant: \"outlined\",\n      onChange: this.handleEmailAddressConfirmationChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      item: true,\n      xs: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384\n      },\n      __self: this\n    }, React.createElement(TextField, {\n      autoComplete: \"new-password\",\n      disabled: performingAction,\n      error: !!(errors && errors.password),\n      fullWidth: true,\n      helperText: errors && errors.password ? errors.password[0] : '',\n      label: \"Password\",\n      placeholder: \"\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\",\n      required: true,\n      type: \"password\",\n      value: password,\n      variant: \"outlined\",\n      onChange: this.handlePasswordChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 385\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      item: true,\n      xs: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402\n      },\n      __self: this\n    }, React.createElement(TextField, {\n      autoComplete: \"password\",\n      disabled: performingAction,\n      error: !!(errors && errors.passwordConfirmation),\n      fullWidth: true,\n      helperText: errors && errors.passwordConfirmation ? errors.passwordConfirmation[0] : '',\n      label: \"Password confirmation\",\n      placeholder: \"\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\",\n      required: true,\n      type: \"password\",\n      value: passwordConfirmation,\n      variant: \"outlined\",\n      onChange: this.handlePasswordConfirmationChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403\n      },\n      __self: this\n    }))))), React.createElement(DialogActions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 423\n      },\n      __self: this\n    }, React.createElement(Button, {\n      color: \"primary\",\n      onClick: dialogProps.onClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424\n      },\n      __self: this\n    }, \"Cancel\"), React.createElement(Button, {\n      color: \"primary\",\n      disabled: !emailAddress || !emailAddressConfirmation || !password || !passwordConfirmation || performingAction,\n      variant: \"contained\",\n      onClick: this.signUp,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426\n      },\n      __self: this\n    }, \"Sign up\")));\n  }\n\n}\n\nSignUpDialog.propTypes = {\n  // Styling\n  classes: PropTypes.object.isRequired,\n  // Dialog Properties\n  dialogProps: PropTypes.object.isRequired,\n  // Custom Functions\n  openSnackbar: PropTypes.func.isRequired\n};\nexport default withStyles(styles)(SignUpDialog);","map":{"version":3,"sources":["/home/hyfbe32/cookit-auth/src/components/SignUpDialog/SignUpDialog.js"],"names":["React","Component","PropTypes","validate","withStyles","Dialog","DialogTitle","DialogContent","DialogActions","Hidden","Grid","Button","Divider","TextField","AuthProviderList","constraints","authentication","styles","theme","dialogContent","overflowY","icon","marginRight","spacing","divider","margin","grid","marginBottom","initialState","performingAction","emailAddress","emailAddressConfirmation","password","passwordConfirmation","errors","SignUpDialog","constructor","props","signUp","state","setState","signUpWithEmailAddressAndPassword","then","value","dialogProps","onClose","catch","reason","code","message","openSnackbar","finally","signInWithAuthProvider","providerId","user","displayName","email","handleKeyPress","event","key","altKey","ctrlKey","metaKey","shiftKey","handleExited","handleEmailAddressChange","target","handleEmailAddressConfirmationChange","handlePasswordChange","handlePasswordConfirmationChange","render","classes","propTypes","object","isRequired","func"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport validate from 'validate.js';\n\nimport { withStyles } from '@material-ui/core/styles';\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\n\nimport Hidden from '@material-ui/core/Hidden';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport Divider from '@material-ui/core/Divider';\nimport TextField from '@material-ui/core/TextField';\n\nimport AuthProviderList from '../AuthProviderList';\n\nimport constraints from '../../constraints';\nimport authentication from '../../services/authentication';\n\nconst styles = (theme) => ({\n  dialogContent: {\n    overflowY: 'hidden'\n  },\n\n  icon: {\n    marginRight: theme.spacing(0.5)\n  },\n\n  divider: {\n    margin: 'auto'\n  },\n\n  grid: {\n    marginBottom: theme.spacing(2)\n  }\n});\n\nconst initialState = {\n  performingAction: false,\n\n  emailAddress: '',\n  emailAddressConfirmation: '',\n  password: '',\n  passwordConfirmation: '',\n\n  errors: null\n};\n\nclass SignUpDialog extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = initialState;\n  }\n\n  signUp = () => {\n    const {\n      emailAddress,\n      emailAddressConfirmation,\n      password,\n      passwordConfirmation\n    } = this.state;\n\n    const errors = validate({\n      emailAddress: emailAddress,\n      emailAddressConfirmation: emailAddressConfirmation,\n      password: password,\n      passwordConfirmation: passwordConfirmation\n    }, {\n      emailAddress: constraints.emailAddress,\n      emailAddressConfirmation: constraints.emailAddressConfirmation,\n      password: constraints.password,\n      passwordConfirmation: constraints.passwordConfirmation\n    });\n\n    if (errors) {\n      this.setState({\n        errors: errors\n      });\n    } else {\n      this.setState({\n        performingAction: true,\n\n        errors: null\n      }, () => {\n        authentication.signUpWithEmailAddressAndPassword(emailAddress, password).then((value) => {\n          this.props.dialogProps.onClose();\n        }).catch((reason) => {\n          const code = reason.code;\n          const message = reason.message;\n\n          switch (code) {\n            case 'auth/email-already-in-use':\n            case 'auth/invalid-email':\n            case 'auth/operation-not-allowed':\n            case 'auth/weak-password':\n              this.props.openSnackbar(message);\n              return;\n\n            default:\n              this.props.openSnackbar(message);\n              return;\n          }\n        }).finally(() => {\n          this.setState({\n            performingAction: false\n          });\n        });\n      });\n    }\n  };\n\n  signInWithAuthProvider = (providerId) => {\n    this.setState({\n      performingAction: true\n    }, () => {\n      authentication.signInWithAuthProvider(providerId).then((value) => {\n        this.props.dialogProps.onClose(() => {\n          const user = value.user;\n          const displayName = user.displayName;\n          const emailAddress = user.email;\n\n          this.props.openSnackbar(`Signed in as ${displayName || emailAddress}`);\n        });\n      }).catch((reason) => {\n        const code = reason.code;\n        const message = reason.message;\n\n        switch (code) {\n          case 'auth/account-exists-with-different-credential':\n          case 'auth/auth-domain-config-required':\n          case 'auth/cancelled-popup-request':\n          case 'auth/operation-not-allowed':\n          case 'auth/operation-not-supported-in-this-environment':\n          case 'auth/popup-blocked':\n          case 'auth/popup-closed-by-user':\n          case 'auth/unauthorized-domain':\n            this.props.openSnackbar(message);\n            return;\n\n          default:\n            this.props.openSnackbar(message);\n            return;\n        }\n      }).finally(() => {\n        this.setState({\n          performingAction: false\n        });\n      });\n    });\n  };\n\n  handleKeyPress = (event) => {\n    const {\n      emailAddress,\n      emailAddressConfirmation,\n      password,\n      passwordConfirmation\n    } = this.state;\n\n    if (!emailAddress ||\n      !emailAddressConfirmation ||\n      !password ||\n      !passwordConfirmation) {\n      return;\n    }\n\n    const key = event.key;\n\n    if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey) {\n      return;\n    }\n\n    if (key === 'Enter') {\n      this.signUp();\n    }\n  };\n\n  handleExited = () => {\n    this.setState(initialState);\n  };\n\n  handleEmailAddressChange = (event) => {\n    const emailAddress = event.target.value;\n\n    this.setState({\n      emailAddress: emailAddress\n    });\n  };\n\n  handleEmailAddressConfirmationChange = (event) => {\n    const emailAddressConfirmation = event.target.value;\n\n    this.setState({\n      emailAddressConfirmation: emailAddressConfirmation\n    });\n  };\n\n  handlePasswordChange = (event) => {\n    const password = event.target.value;\n\n    this.setState({\n      password: password\n    });\n  };\n\n  handlePasswordConfirmationChange = (event) => {\n    const passwordConfirmation = event.target.value;\n\n    this.setState({\n      passwordConfirmation: passwordConfirmation\n    });\n  };\n\n  render() {\n    // Styling\n    const { classes } = this.props;\n\n    // Dialog Properties\n    const { dialogProps } = this.props;\n\n    const {\n      performingAction,\n\n      emailAddress,\n      emailAddressConfirmation,\n      password,\n      passwordConfirmation,\n\n      errors\n    } = this.state;\n\n    return (\n      <Dialog fullWidth maxWidth=\"sm\" {...dialogProps} onKeyPress={this.handleKeyPress} onExited={this.handleExited}>\n        <DialogTitle>\n          Sign up for an account\n        </DialogTitle>\n\n        <Hidden smDown>\n          <DialogContent className={classes.dialogContent}>\n            <Grid container direction=\"row\">\n              <Grid item xs={4}>\n                <AuthProviderList\n                  performingAction={performingAction}\n\n                  onAuthProviderClick={this.signInWithAuthProvider}\n                />\n              </Grid>\n\n              <Grid item xs={1}>\n                <Divider className={classes.divider} orientation=\"vertical\" />\n              </Grid>\n\n              <Grid item xs={7}>\n                <Grid container direction=\"column\" spacing={2}>\n                  <Grid item xs>\n                    <TextField\n                      autoComplete=\"email\"\n                      disabled={performingAction}\n                      error={!!(errors && errors.emailAddress)}\n                      fullWidth\n                      helperText={(errors && errors.emailAddress) ? errors.emailAddress[0] : ''}\n                      label=\"E-mail address\"\n                      placeholder=\"john@doe.com\"\n                      required\n                      type=\"email\"\n                      value={emailAddress}\n                      variant=\"outlined\"\n\n                      onChange={this.handleEmailAddressChange}\n                    />\n                  </Grid>\n\n                  <Grid item xs>\n                    <TextField\n                      autoComplete=\"email\"\n                      disabled={performingAction}\n                      error={!!(errors && errors.emailAddressConfirmation)}\n                      fullWidth\n                      helperText={(errors && errors.emailAddressConfirmation) ? errors.emailAddressConfirmation[0] : ''}\n                      label=\"E-mail address confirmation\"\n                      placeholder=\"john@doe.com\"\n                      required\n                      type=\"email\"\n                      value={emailAddressConfirmation}\n                      variant=\"outlined\"\n\n                      onChange={this.handleEmailAddressConfirmationChange}\n                    />\n                  </Grid>\n\n                  <Grid item xs>\n                    <TextField\n                      autoComplete=\"new-password\"\n                      disabled={performingAction}\n                      error={!!(errors && errors.password)}\n                      fullWidth\n                      helperText={(errors && errors.password) ? errors.password[0] : ''}\n                      label=\"Password\"\n                      placeholder=\"&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;\"\n                      required\n                      type=\"password\"\n                      value={password}\n                      variant=\"outlined\"\n\n                      onChange={this.handlePasswordChange}\n                    />\n                  </Grid>\n\n                  <Grid item xs>\n                    <TextField\n                      autoComplete=\"password\"\n                      disabled={performingAction}\n                      error={!!(errors && errors.passwordConfirmation)}\n                      fullWidth\n                      helperText={(errors && errors.passwordConfirmation) ? errors.passwordConfirmation[0] : ''}\n                      label=\"Password confirmation\"\n                      placeholder=\"&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;\"\n                      required\n                      type=\"password\"\n                      value={passwordConfirmation}\n                      variant=\"outlined\"\n\n                      onChange={this.handlePasswordConfirmationChange}\n                    />\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n          </DialogContent>\n        </Hidden>\n\n        <Hidden mdUp>\n          <DialogContent>\n            <AuthProviderList\n              gutterBottom\n              performingAction={performingAction}\n\n              onAuthProviderClick={this.signInWithAuthProvider}\n            />\n\n            <Grid container direction=\"column\" spacing={2}>\n              <Grid item xs>\n                <TextField\n                  autoComplete=\"email\"\n                  disabled={performingAction}\n                  error={!!(errors && errors.emailAddress)}\n                  fullWidth\n                  helperText={(errors && errors.emailAddress) ? errors.emailAddress[0] : ''}\n                  label=\"E-mail address\"\n                  placeholder=\"john@doe.com\"\n                  required\n                  type=\"email\"\n                  value={emailAddress}\n                  variant=\"outlined\"\n\n                  onChange={this.handleEmailAddressChange}\n                />\n              </Grid>\n\n              <Grid item xs>\n                <TextField\n                  autoComplete=\"email\"\n                  disabled={performingAction}\n                  error={!!(errors && errors.emailAddressConfirmation)}\n                  fullWidth\n                  helperText={(errors && errors.emailAddressConfirmation) ? errors.emailAddressConfirmation[0] : ''}\n                  label=\"E-mail address confirmation\"\n                  placeholder=\"john@doe.com\"\n                  required\n                  type=\"email\"\n                  value={emailAddressConfirmation}\n                  variant=\"outlined\"\n\n                  onChange={this.handleEmailAddressConfirmationChange}\n                />\n              </Grid>\n\n              <Grid item xs>\n                <TextField\n                  autoComplete=\"new-password\"\n                  disabled={performingAction}\n                  error={!!(errors && errors.password)}\n                  fullWidth\n                  helperText={(errors && errors.password) ? errors.password[0] : ''}\n                  label=\"Password\"\n                  placeholder=\"&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;\"\n                  required\n                  type=\"password\"\n                  value={password}\n                  variant=\"outlined\"\n\n                  onChange={this.handlePasswordChange}\n                />\n              </Grid>\n\n              <Grid item xs>\n                <TextField\n                  autoComplete=\"password\"\n                  disabled={performingAction}\n                  error={!!(errors && errors.passwordConfirmation)}\n                  fullWidth\n                  helperText={(errors && errors.passwordConfirmation) ? errors.passwordConfirmation[0] : ''}\n                  label=\"Password confirmation\"\n                  placeholder=\"&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;\"\n                  required\n                  type=\"password\"\n                  value={passwordConfirmation}\n                  variant=\"outlined\"\n\n                  onChange={this.handlePasswordConfirmationChange}\n                />\n              </Grid>\n            </Grid>\n          </DialogContent>\n        </Hidden>\n\n        <DialogActions>\n          <Button color=\"primary\" onClick={dialogProps.onClose}>Cancel</Button>\n\n          <Button\n            color=\"primary\"\n            disabled={\n              !emailAddress ||\n              !emailAddressConfirmation ||\n              !password ||\n              !passwordConfirmation ||\n              performingAction\n            }\n            variant=\"contained\"\n\n            onClick={this.signUp}>\n            Sign up\n          </Button>\n        </DialogActions>\n      </Dialog>\n    );\n  }\n}\n\nSignUpDialog.propTypes = {\n  // Styling\n  classes: PropTypes.object.isRequired,\n\n  // Dialog Properties\n  dialogProps: PropTypes.object.isRequired,\n\n  // Custom Functions\n  openSnackbar: PropTypes.func.isRequired\n};\n\nexport default withStyles(styles)(SignUpDialog);\n"]},"metadata":{},"sourceType":"module"}
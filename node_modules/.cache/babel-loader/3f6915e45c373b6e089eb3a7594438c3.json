{"ast":null,"code":"var _jsxFileName = \"/home/hyfbe32/cookit-auth/src/components/SignInDialog/SignInDialog.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport validate from 'validate.js';\nimport { withStyles } from '@material-ui/core/styles';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Hidden from '@material-ui/core/Hidden';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport Divider from '@material-ui/core/Divider';\nimport TextField from '@material-ui/core/TextField';\nimport AuthProviderList from '../AuthProviderList';\nimport constraints from '../../constraints';\nimport authentication from '../../services/authentication';\n\nconst styles = theme => ({\n  icon: {\n    marginRight: theme.spacing(0.5)\n  },\n  divider: {\n    margin: 'auto'\n  },\n  grid: {\n    marginBottom: theme.spacing(2)\n  }\n});\n\nconst initialState = {\n  performingAction: false,\n  emailAddress: '',\n  password: '',\n  errors: null\n};\n\nclass SignInDialog extends Component {\n  constructor(props) {\n    super(props);\n\n    this.resetPassword = () => {\n      const emailAddress = this.state.emailAddress;\n      const errors = validate({\n        emailAddress: emailAddress\n      }, {\n        emailAddress: constraints.emailAddress\n      });\n\n      if (errors) {\n        this.setState({\n          errors: errors\n        });\n      } else {\n        this.setState({\n          errors: null\n        }, () => {\n          this.setState({\n            performingAction: true\n          }, () => {\n            authentication.resetPassword(emailAddress).then(value => {\n              this.props.openSnackbar(\"Sent password reset e-mail to \".concat(emailAddress));\n            }).catch(reason => {\n              const code = reason.code;\n              const message = reason.message;\n\n              switch (code) {\n                case 'auth/invalid-email':\n                case 'auth/missing-android-pkg-name':\n                case 'auth/missing-continue-uri':\n                case 'auth/missing-ios-bundle-id':\n                case 'auth/invalid-continue-uri':\n                case 'auth/unauthorized-continue-uri':\n                case 'auth/user-not-found':\n                  this.props.openSnackbar(message);\n                  return;\n\n                default:\n                  this.props.openSnackbar(message);\n                  return;\n              }\n            }).finally(() => {\n              this.setState({\n                performingAction: false\n              });\n            });\n          });\n        });\n      }\n    };\n\n    this.signIn = () => {\n      const _this$state = this.state,\n            emailAddress = _this$state.emailAddress,\n            password = _this$state.password;\n      const errors = validate({\n        emailAddress: emailAddress,\n        password: password\n      }, {\n        emailAddress: constraints.emailAddress,\n        password: constraints.password\n      });\n\n      if (errors) {\n        this.setState({\n          errors: errors\n        });\n      } else {\n        this.setState({\n          performingAction: true,\n          errors: null\n        }, () => {\n          authentication.signIn(emailAddress, password).then(value => {\n            this.props.dialogProps.onClose(() => {\n              const user = value.user;\n              const displayName = user.displayName;\n              const emailAddress = user.email;\n              this.props.openSnackbar(\"Signed in as \".concat(displayName || emailAddress));\n            });\n          }).catch(reason => {\n            const code = reason.code;\n            const message = reason.message;\n\n            switch (code) {\n              case 'auth/invalid-email':\n              case 'auth/user-disabled':\n              case 'auth/user-not-found':\n              case 'auth/wrong-password':\n                this.props.openSnackbar(message);\n                return;\n\n              default:\n                this.props.openSnackbar(message);\n                return;\n            }\n          }).finally(() => {\n            this.setState({\n              performingAction: false\n            });\n          });\n        });\n      }\n    };\n\n    this.signInWithAuthProvider = providerId => {\n      this.setState({\n        performingAction: true\n      }, () => {\n        authentication.signInWithAuthProvider(providerId).then(value => {\n          this.props.dialogProps.onClose(() => {\n            const user = value.user;\n            const displayName = user.displayName;\n            const emailAddress = user.email;\n            this.props.openSnackbar(\"Signed in as \".concat(displayName || emailAddress));\n          });\n        }).catch(reason => {\n          const code = reason.code;\n          const message = reason.message;\n\n          switch (code) {\n            case 'auth/account-exists-with-different-credential':\n            case 'auth/auth-domain-config-required':\n            case 'auth/cancelled-popup-request':\n            case 'auth/operation-not-allowed':\n            case 'auth/operation-not-supported-in-this-environment':\n            case 'auth/popup-blocked':\n            case 'auth/popup-closed-by-user':\n            case 'auth/unauthorized-domain':\n              this.props.openSnackbar(message);\n              return;\n\n            default:\n              this.props.openSnackbar(message);\n              return;\n          }\n        }).finally(() => {\n          this.setState({\n            performingAction: false\n          });\n        });\n      });\n    };\n\n    this.handleKeyPress = event => {\n      const _this$state2 = this.state,\n            emailAddress = _this$state2.emailAddress,\n            password = _this$state2.password;\n\n      if (!emailAddress || !password) {\n        return;\n      }\n\n      const key = event.key;\n\n      if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey) {\n        return;\n      }\n\n      if (key === 'Enter') {\n        this.signIn();\n      }\n    };\n\n    this.handleExited = () => {\n      this.setState(initialState);\n    };\n\n    this.handleEmailAddressChange = event => {\n      const emailAddress = event.target.value;\n      this.setState({\n        emailAddress: emailAddress\n      });\n    };\n\n    this.handlePasswordChange = event => {\n      const password = event.target.value;\n      this.setState({\n        password: password\n      });\n    };\n\n    this.state = initialState;\n  }\n\n  render() {\n    // Styling\n    const classes = this.props.classes; // Dialog Properties\n\n    const dialogProps = this.props.dialogProps;\n    const _this$state3 = this.state,\n          performingAction = _this$state3.performingAction,\n          emailAddress = _this$state3.emailAddress,\n          password = _this$state3.password,\n          errors = _this$state3.errors;\n    return React.createElement(Dialog, Object.assign({\n      fullWidth: true,\n      maxWidth: \"sm\"\n    }, dialogProps, {\n      onKeyPress: this.handleKeyPress,\n      onExited: this.handleExited,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255\n      },\n      __self: this\n    }), React.createElement(DialogTitle, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }, \"Sign in to your account\"), React.createElement(DialogContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }, React.createElement(Hidden, {\n      xsDown: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      container: true,\n      direction: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    }, React.createElement(AuthProviderList, {\n      performingAction: performingAction,\n      onAuthProviderClick: this.signInWithAuthProvider,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      item: true,\n      xs: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271\n      },\n      __self: this\n    }, React.createElement(Divider, {\n      className: classes.divider,\n      orientation: \"vertical\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      item: true,\n      xs: 7,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      container: true,\n      direction: \"column\",\n      spacing: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    }, React.createElement(TextField, {\n      autoComplete: \"email\",\n      disabled: performingAction,\n      error: !!(errors && errors.emailAddress),\n      fullWidth: true,\n      helperText: errors && errors.emailAddress ? errors.emailAddress[0] : '',\n      label: \"E-mail address\",\n      placeholder: \"john@doe.com\",\n      required: true,\n      type: \"email\",\n      value: emailAddress,\n      variant: \"outlined\",\n      onChange: this.handleEmailAddressChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      item: true,\n      xs: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295\n      },\n      __self: this\n    }, React.createElement(TextField, {\n      autoComplete: \"current-password\",\n      disabled: performingAction,\n      error: !!(errors && errors.password),\n      fullWidth: true,\n      helperText: errors && errors.password ? errors.password[0] : '',\n      label: \"Password\",\n      placeholder: \"\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\",\n      required: true,\n      type: \"password\",\n      value: password,\n      variant: \"outlined\",\n      onChange: this.handlePasswordChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296\n      },\n      __self: this\n    })))))), React.createElement(Hidden, {\n      smUp: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    }, React.createElement(AuthProviderList, {\n      gutterBottom: true,\n      performingAction: performingAction,\n      onAuthProviderClick: this.signInWithAuthProvider,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    }), React.createElement(Grid, {\n      container: true,\n      direction: \"column\",\n      spacing: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }, React.createElement(TextField, {\n      autoComplete: \"email\",\n      disabled: performingAction,\n      error: !!(errors && errors.emailAddress),\n      fullWidth: true,\n      helperText: errors && errors.emailAddress ? errors.emailAddress[0] : '',\n      label: \"E-mail address\",\n      placeholder: \"john@doe.com\",\n      required: true,\n      type: \"email\",\n      value: emailAddress,\n      variant: \"outlined\",\n      onChange: this.handleEmailAddressChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      item: true,\n      xs: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344\n      },\n      __self: this\n    }, React.createElement(TextField, {\n      autoComplete: \"current-password\",\n      disabled: performingAction,\n      error: !!(errors && errors.password),\n      fullWidth: true,\n      helperText: errors && errors.password ? errors.password[0] : '',\n      label: \"Password\",\n      placeholder: \"\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\",\n      required: true,\n      type: \"password\",\n      value: password,\n      variant: \"outlined\",\n      onChange: this.handlePasswordChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345\n      },\n      __self: this\n    }))))), React.createElement(DialogActions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365\n      },\n      __self: this\n    }, React.createElement(Button, {\n      color: \"primary\",\n      onClick: dialogProps.onClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366\n      },\n      __self: this\n    }, \"Cancel\"), React.createElement(Button, {\n      color: \"primary\",\n      disabled: !emailAddress || performingAction,\n      variant: \"outlined\",\n      onClick: this.resetPassword,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368\n      },\n      __self: this\n    }, \"Reset password\"), React.createElement(Button, {\n      color: \"primary\",\n      disabled: !emailAddress || !password || performingAction,\n      variant: \"contained\",\n      onClick: this.signIn,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377\n      },\n      __self: this\n    }, \"Sign in\")));\n  }\n\n}\n\nSignInDialog.propTypes = {\n  // Styling\n  classes: PropTypes.object.isRequired,\n  // Dialog Properties\n  dialogProps: PropTypes.object.isRequired,\n  // Custom Functions\n  openSnackbar: PropTypes.func.isRequired\n};\nexport default withStyles(styles)(SignInDialog);","map":{"version":3,"sources":["/home/hyfbe32/cookit-auth/src/components/SignInDialog/SignInDialog.js"],"names":["React","Component","PropTypes","validate","withStyles","Dialog","DialogTitle","DialogContent","DialogActions","Hidden","Grid","Button","Divider","TextField","AuthProviderList","constraints","authentication","styles","theme","icon","marginRight","spacing","divider","margin","grid","marginBottom","initialState","performingAction","emailAddress","password","errors","SignInDialog","constructor","props","resetPassword","state","setState","then","value","openSnackbar","catch","reason","code","message","finally","signIn","dialogProps","onClose","user","displayName","email","signInWithAuthProvider","providerId","handleKeyPress","event","key","altKey","ctrlKey","metaKey","shiftKey","handleExited","handleEmailAddressChange","target","handlePasswordChange","render","classes","propTypes","object","isRequired","func"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAOC,QAAP,MAAqB,aAArB;AAEA,SAASC,UAAT,QAA2B,0BAA3B;AAEA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AAEA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AAEA,OAAOC,gBAAP,MAA6B,qBAA7B;AAEA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,OAAOC,cAAP,MAA2B,+BAA3B;;AAEA,MAAMC,MAAM,GAAIC,KAAD,KAAY;AACzBC,EAAAA,IAAI,EAAE;AACJC,IAAAA,WAAW,EAAEF,KAAK,CAACG,OAAN,CAAc,GAAd;AADT,GADmB;AAKzBC,EAAAA,OAAO,EAAE;AACPC,IAAAA,MAAM,EAAE;AADD,GALgB;AASzBC,EAAAA,IAAI,EAAE;AACJC,IAAAA,YAAY,EAAEP,KAAK,CAACG,OAAN,CAAc,CAAd;AADV;AATmB,CAAZ,CAAf;;AAcA,MAAMK,YAAY,GAAG;AACnBC,EAAAA,gBAAgB,EAAE,KADC;AAGnBC,EAAAA,YAAY,EAAE,EAHK;AAInBC,EAAAA,QAAQ,EAAE,EAJS;AAMnBC,EAAAA,MAAM,EAAE;AANW,CAArB;;AASA,MAAMC,YAAN,SAA2B9B,SAA3B,CAAqC;AACnC+B,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAMnBC,aANmB,GAMH,MAAM;AAAA,YACZN,YADY,GACK,KAAKO,KADV,CACZP,YADY;AAGpB,YAAME,MAAM,GAAG3B,QAAQ,CAAC;AACtByB,QAAAA,YAAY,EAAEA;AADQ,OAAD,EAEpB;AACDA,QAAAA,YAAY,EAAEb,WAAW,CAACa;AADzB,OAFoB,CAAvB;;AAMA,UAAIE,MAAJ,EAAY;AACV,aAAKM,QAAL,CAAc;AACZN,UAAAA,MAAM,EAAEA;AADI,SAAd;AAGD,OAJD,MAIO;AACL,aAAKM,QAAL,CAAc;AACZN,UAAAA,MAAM,EAAE;AADI,SAAd,EAEG,MAAM;AACP,eAAKM,QAAL,CAAc;AACZT,YAAAA,gBAAgB,EAAE;AADN,WAAd,EAEG,MAAM;AACPX,YAAAA,cAAc,CAACkB,aAAf,CAA6BN,YAA7B,EAA2CS,IAA3C,CAAiDC,KAAD,IAAW;AACzD,mBAAKL,KAAL,CAAWM,YAAX,yCAAyDX,YAAzD;AACD,aAFD,EAEGY,KAFH,CAEUC,MAAD,IAAY;AACnB,oBAAMC,IAAI,GAAGD,MAAM,CAACC,IAApB;AACA,oBAAMC,OAAO,GAAGF,MAAM,CAACE,OAAvB;;AAEA,sBAAQD,IAAR;AACE,qBAAK,oBAAL;AACA,qBAAK,+BAAL;AACA,qBAAK,2BAAL;AACA,qBAAK,4BAAL;AACA,qBAAK,2BAAL;AACA,qBAAK,gCAAL;AACA,qBAAK,qBAAL;AACE,uBAAKT,KAAL,CAAWM,YAAX,CAAwBI,OAAxB;AACA;;AAEF;AACE,uBAAKV,KAAL,CAAWM,YAAX,CAAwBI,OAAxB;AACA;AAbJ;AAeD,aArBD,EAqBGC,OArBH,CAqBW,MAAM;AACf,mBAAKR,QAAL,CAAc;AACZT,gBAAAA,gBAAgB,EAAE;AADN,eAAd;AAGD,aAzBD;AA0BD,WA7BD;AA8BD,SAjCD;AAkCD;AACF,KAvDkB;;AAAA,SAyDnBkB,MAzDmB,GAyDV,MAAM;AAAA,0BACsB,KAAKV,KAD3B;AAAA,YACLP,YADK,eACLA,YADK;AAAA,YACSC,QADT,eACSA,QADT;AAGb,YAAMC,MAAM,GAAG3B,QAAQ,CAAC;AACtByB,QAAAA,YAAY,EAAEA,YADQ;AAEtBC,QAAAA,QAAQ,EAAEA;AAFY,OAAD,EAGpB;AACDD,QAAAA,YAAY,EAAEb,WAAW,CAACa,YADzB;AAEDC,QAAAA,QAAQ,EAAEd,WAAW,CAACc;AAFrB,OAHoB,CAAvB;;AAQA,UAAIC,MAAJ,EAAY;AACV,aAAKM,QAAL,CAAc;AACZN,UAAAA,MAAM,EAAEA;AADI,SAAd;AAGD,OAJD,MAIO;AACL,aAAKM,QAAL,CAAc;AACZT,UAAAA,gBAAgB,EAAE,IADN;AAGZG,UAAAA,MAAM,EAAE;AAHI,SAAd,EAIG,MAAM;AACPd,UAAAA,cAAc,CAAC6B,MAAf,CAAsBjB,YAAtB,EAAoCC,QAApC,EAA8CQ,IAA9C,CAAoDC,KAAD,IAAW;AAC5D,iBAAKL,KAAL,CAAWa,WAAX,CAAuBC,OAAvB,CAA+B,MAAM;AACnC,oBAAMC,IAAI,GAAGV,KAAK,CAACU,IAAnB;AACA,oBAAMC,WAAW,GAAGD,IAAI,CAACC,WAAzB;AACA,oBAAMrB,YAAY,GAAGoB,IAAI,CAACE,KAA1B;AAEA,mBAAKjB,KAAL,CAAWM,YAAX,wBAAwCU,WAAW,IAAIrB,YAAvD;AACD,aAND;AAOD,WARD,EAQGY,KARH,CAQUC,MAAD,IAAY;AACnB,kBAAMC,IAAI,GAAGD,MAAM,CAACC,IAApB;AACA,kBAAMC,OAAO,GAAGF,MAAM,CAACE,OAAvB;;AAEA,oBAAQD,IAAR;AACE,mBAAK,oBAAL;AACA,mBAAK,oBAAL;AACA,mBAAK,qBAAL;AACA,mBAAK,qBAAL;AACE,qBAAKT,KAAL,CAAWM,YAAX,CAAwBI,OAAxB;AACA;;AAEF;AACE,qBAAKV,KAAL,CAAWM,YAAX,CAAwBI,OAAxB;AACA;AAVJ;AAYD,WAxBD,EAwBGC,OAxBH,CAwBW,MAAM;AACf,iBAAKR,QAAL,CAAc;AACZT,cAAAA,gBAAgB,EAAE;AADN,aAAd;AAGD,WA5BD;AA6BD,SAlCD;AAmCD;AACF,KA7GkB;;AAAA,SA+GnBwB,sBA/GmB,GA+GOC,UAAD,IAAgB;AACvC,WAAKhB,QAAL,CAAc;AACZT,QAAAA,gBAAgB,EAAE;AADN,OAAd,EAEG,MAAM;AACPX,QAAAA,cAAc,CAACmC,sBAAf,CAAsCC,UAAtC,EAAkDf,IAAlD,CAAwDC,KAAD,IAAW;AAChE,eAAKL,KAAL,CAAWa,WAAX,CAAuBC,OAAvB,CAA+B,MAAM;AACnC,kBAAMC,IAAI,GAAGV,KAAK,CAACU,IAAnB;AACA,kBAAMC,WAAW,GAAGD,IAAI,CAACC,WAAzB;AACA,kBAAMrB,YAAY,GAAGoB,IAAI,CAACE,KAA1B;AAEA,iBAAKjB,KAAL,CAAWM,YAAX,wBAAwCU,WAAW,IAAIrB,YAAvD;AACD,WAND;AAOD,SARD,EAQGY,KARH,CAQUC,MAAD,IAAY;AACnB,gBAAMC,IAAI,GAAGD,MAAM,CAACC,IAApB;AACA,gBAAMC,OAAO,GAAGF,MAAM,CAACE,OAAvB;;AAEA,kBAAQD,IAAR;AACE,iBAAK,+CAAL;AACA,iBAAK,kCAAL;AACA,iBAAK,8BAAL;AACA,iBAAK,4BAAL;AACA,iBAAK,kDAAL;AACA,iBAAK,oBAAL;AACA,iBAAK,2BAAL;AACA,iBAAK,0BAAL;AACE,mBAAKT,KAAL,CAAWM,YAAX,CAAwBI,OAAxB;AACA;;AAEF;AACE,mBAAKV,KAAL,CAAWM,YAAX,CAAwBI,OAAxB;AACA;AAdJ;AAgBD,SA5BD,EA4BGC,OA5BH,CA4BW,MAAM;AACf,eAAKR,QAAL,CAAc;AACZT,YAAAA,gBAAgB,EAAE;AADN,WAAd;AAGD,SAhCD;AAiCD,OApCD;AAqCD,KArJkB;;AAAA,SAuJnB0B,cAvJmB,GAuJDC,KAAD,IAAW;AAAA,2BACS,KAAKnB,KADd;AAAA,YAClBP,YADkB,gBAClBA,YADkB;AAAA,YACJC,QADI,gBACJA,QADI;;AAG1B,UAAI,CAACD,YAAD,IAAiB,CAACC,QAAtB,EAAgC;AAC9B;AACD;;AAED,YAAM0B,GAAG,GAAGD,KAAK,CAACC,GAAlB;;AAEA,UAAID,KAAK,CAACE,MAAN,IAAgBF,KAAK,CAACG,OAAtB,IAAiCH,KAAK,CAACI,OAAvC,IAAkDJ,KAAK,CAACK,QAA5D,EAAsE;AACpE;AACD;;AAED,UAAIJ,GAAG,KAAK,OAAZ,EAAqB;AACnB,aAAKV,MAAL;AACD;AACF,KAvKkB;;AAAA,SAyKnBe,YAzKmB,GAyKJ,MAAM;AACnB,WAAKxB,QAAL,CAAcV,YAAd;AACD,KA3KkB;;AAAA,SA6KnBmC,wBA7KmB,GA6KSP,KAAD,IAAW;AACpC,YAAM1B,YAAY,GAAG0B,KAAK,CAACQ,MAAN,CAAaxB,KAAlC;AAEA,WAAKF,QAAL,CAAc;AACZR,QAAAA,YAAY,EAAEA;AADF,OAAd;AAGD,KAnLkB;;AAAA,SAqLnBmC,oBArLmB,GAqLKT,KAAD,IAAW;AAChC,YAAMzB,QAAQ,GAAGyB,KAAK,CAACQ,MAAN,CAAaxB,KAA9B;AAEA,WAAKF,QAAL,CAAc;AACZP,QAAAA,QAAQ,EAAEA;AADE,OAAd;AAGD,KA3LkB;;AAGjB,SAAKM,KAAL,GAAaT,YAAb;AACD;;AAyLDsC,EAAAA,MAAM,GAAG;AACP;AADO,UAECC,OAFD,GAEa,KAAKhC,KAFlB,CAECgC,OAFD,EAIP;;AAJO,UAKCnB,WALD,GAKiB,KAAKb,KALtB,CAKCa,WALD;AAAA,yBAcH,KAAKX,KAdF;AAAA,UAQLR,gBARK,gBAQLA,gBARK;AAAA,UAULC,YAVK,gBAULA,YAVK;AAAA,UAWLC,QAXK,gBAWLA,QAXK;AAAA,UAaLC,MAbK,gBAaLA,MAbK;AAgBP,WACE,oBAAC,MAAD;AAAQ,MAAA,SAAS,MAAjB;AAAkB,MAAA,QAAQ,EAAC;AAA3B,OAAoCgB,WAApC;AAAiD,MAAA,UAAU,EAAE,KAAKO,cAAlE;AAAkF,MAAA,QAAQ,EAAE,KAAKO,YAAjG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCADF,EAKE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AAAQ,MAAA,MAAM,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,SAAS,EAAC,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,gBAAD;AACE,MAAA,gBAAgB,EAAEjC,gBADpB;AAGE,MAAA,mBAAmB,EAAE,KAAKwB,sBAH5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,EASE,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,OAAD;AAAS,MAAA,SAAS,EAAEc,OAAO,CAAC3C,OAA5B;AAAqC,MAAA,WAAW,EAAC,UAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CATF,EAaE,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,SAAS,EAAC,QAA1B;AAAmC,MAAA,OAAO,EAAE,CAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,YAAY,EAAC,OADf;AAEE,MAAA,QAAQ,EAAEK,gBAFZ;AAGE,MAAA,KAAK,EAAE,CAAC,EAAEG,MAAM,IAAIA,MAAM,CAACF,YAAnB,CAHV;AAIE,MAAA,SAAS,MAJX;AAKE,MAAA,UAAU,EAAGE,MAAM,IAAIA,MAAM,CAACF,YAAlB,GAAkCE,MAAM,CAACF,YAAP,CAAoB,CAApB,CAAlC,GAA2D,EALzE;AAME,MAAA,KAAK,EAAC,gBANR;AAOE,MAAA,WAAW,EAAC,cAPd;AAQE,MAAA,QAAQ,MARV;AASE,MAAA,IAAI,EAAC,OATP;AAUE,MAAA,KAAK,EAAEA,YAVT;AAWE,MAAA,OAAO,EAAC,UAXV;AAaE,MAAA,QAAQ,EAAE,KAAKiC,wBAbjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,EAmBE,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,YAAY,EAAC,kBADf;AAEE,MAAA,QAAQ,EAAElC,gBAFZ;AAGE,MAAA,KAAK,EAAE,CAAC,EAAEG,MAAM,IAAIA,MAAM,CAACD,QAAnB,CAHV;AAIE,MAAA,SAAS,MAJX;AAKE,MAAA,UAAU,EAAGC,MAAM,IAAIA,MAAM,CAACD,QAAlB,GAA8BC,MAAM,CAACD,QAAP,CAAgB,CAAhB,CAA9B,GAAmD,EALjE;AAME,MAAA,KAAK,EAAC,UANR;AAOE,MAAA,WAAW,EAAC,sFAPd;AAQE,MAAA,QAAQ,MARV;AASE,MAAA,IAAI,EAAC,UATP;AAUE,MAAA,KAAK,EAAEA,QAVT;AAWE,MAAA,OAAO,EAAC,UAXV;AAaE,MAAA,QAAQ,EAAE,KAAKkC,oBAbjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAnBF,CADF,CAbF,CADF,CADF,EAyDE,oBAAC,MAAD;AAAQ,MAAA,IAAI,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,gBAAD;AACE,MAAA,YAAY,MADd;AAEE,MAAA,gBAAgB,EAAEpC,gBAFpB;AAIE,MAAA,mBAAmB,EAAE,KAAKwB,sBAJ5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAQE,oBAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,SAAS,EAAC,QAA1B;AAAmC,MAAA,OAAO,EAAE,CAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,YAAY,EAAC,OADf;AAEE,MAAA,QAAQ,EAAExB,gBAFZ;AAGE,MAAA,KAAK,EAAE,CAAC,EAAEG,MAAM,IAAIA,MAAM,CAACF,YAAnB,CAHV;AAIE,MAAA,SAAS,MAJX;AAKE,MAAA,UAAU,EAAGE,MAAM,IAAIA,MAAM,CAACF,YAAlB,GAAkCE,MAAM,CAACF,YAAP,CAAoB,CAApB,CAAlC,GAA2D,EALzE;AAME,MAAA,KAAK,EAAC,gBANR;AAOE,MAAA,WAAW,EAAC,cAPd;AAQE,MAAA,QAAQ,MARV;AASE,MAAA,IAAI,EAAC,OATP;AAUE,MAAA,KAAK,EAAEA,YAVT;AAWE,MAAA,OAAO,EAAC,UAXV;AAaE,MAAA,QAAQ,EAAE,KAAKiC,wBAbjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,EAmBE,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,YAAY,EAAC,kBADf;AAEE,MAAA,QAAQ,EAAElC,gBAFZ;AAGE,MAAA,KAAK,EAAE,CAAC,EAAEG,MAAM,IAAIA,MAAM,CAACD,QAAnB,CAHV;AAIE,MAAA,SAAS,MAJX;AAKE,MAAA,UAAU,EAAGC,MAAM,IAAIA,MAAM,CAACD,QAAlB,GAA8BC,MAAM,CAACD,QAAP,CAAgB,CAAhB,CAA9B,GAAmD,EALjE;AAME,MAAA,KAAK,EAAC,UANR;AAOE,MAAA,WAAW,EAAC,sFAPd;AAQE,MAAA,QAAQ,MARV;AASE,MAAA,IAAI,EAAC,UATP;AAUE,MAAA,KAAK,EAAEA,QAVT;AAWE,MAAA,OAAO,EAAC,UAXV;AAaE,MAAA,QAAQ,EAAE,KAAKkC,oBAbjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAnBF,CARF,CAzDF,CALF,EA8GE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,SAAd;AAAwB,MAAA,OAAO,EAAEjB,WAAW,CAACC,OAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAGE,oBAAC,MAAD;AACE,MAAA,KAAK,EAAC,SADR;AAEE,MAAA,QAAQ,EAAE,CAACnB,YAAD,IAAiBD,gBAF7B;AAGE,MAAA,OAAO,EAAC,UAHV;AAKE,MAAA,OAAO,EAAE,KAAKO,aALhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAHF,EAYE,oBAAC,MAAD;AACE,MAAA,KAAK,EAAC,SADR;AAEE,MAAA,QAAQ,EAAG,CAACN,YAAD,IAAiB,CAACC,QAAnB,IAAgCF,gBAF5C;AAGE,MAAA,OAAO,EAAC,WAHV;AAKE,MAAA,OAAO,EAAE,KAAKkB,MALhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAZF,CA9GF,CADF;AAsID;;AApVkC;;AAuVrCd,YAAY,CAACmC,SAAb,GAAyB;AACvB;AACAD,EAAAA,OAAO,EAAE/D,SAAS,CAACiE,MAAV,CAAiBC,UAFH;AAIvB;AACAtB,EAAAA,WAAW,EAAE5C,SAAS,CAACiE,MAAV,CAAiBC,UALP;AAOvB;AACA7B,EAAAA,YAAY,EAAErC,SAAS,CAACmE,IAAV,CAAeD;AARN,CAAzB;AAWA,eAAehE,UAAU,CAACa,MAAD,CAAV,CAAmBc,YAAnB,CAAf","sourcesContent":["import React, { Component } from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport validate from 'validate.js';\n\nimport { withStyles } from '@material-ui/core/styles';\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\n\nimport Hidden from '@material-ui/core/Hidden';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport Divider from '@material-ui/core/Divider';\nimport TextField from '@material-ui/core/TextField';\n\nimport AuthProviderList from '../AuthProviderList';\n\nimport constraints from '../../constraints';\nimport authentication from '../../services/authentication';\n\nconst styles = (theme) => ({\n  icon: {\n    marginRight: theme.spacing(0.5)\n  },\n\n  divider: {\n    margin: 'auto'\n  },\n\n  grid: {\n    marginBottom: theme.spacing(2)\n  }\n});\n\nconst initialState = {\n  performingAction: false,\n\n  emailAddress: '',\n  password: '',\n\n  errors: null\n};\n\nclass SignInDialog extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = initialState;\n  }\n\n  resetPassword = () => {\n    const { emailAddress } = this.state;\n\n    const errors = validate({\n      emailAddress: emailAddress\n    }, {\n      emailAddress: constraints.emailAddress\n    });\n\n    if (errors) {\n      this.setState({\n        errors: errors\n      });\n    } else {\n      this.setState({\n        errors: null\n      }, () => {\n        this.setState({\n          performingAction: true\n        }, () => {\n          authentication.resetPassword(emailAddress).then((value) => {\n            this.props.openSnackbar(`Sent password reset e-mail to ${emailAddress}`);\n          }).catch((reason) => {\n            const code = reason.code;\n            const message = reason.message;\n\n            switch (code) {\n              case 'auth/invalid-email':\n              case 'auth/missing-android-pkg-name':\n              case 'auth/missing-continue-uri':\n              case 'auth/missing-ios-bundle-id':\n              case 'auth/invalid-continue-uri':\n              case 'auth/unauthorized-continue-uri':\n              case 'auth/user-not-found':\n                this.props.openSnackbar(message);\n                return;\n\n              default:\n                this.props.openSnackbar(message);\n                return;\n            }\n          }).finally(() => {\n            this.setState({\n              performingAction: false\n            });\n          });\n        });\n      });\n    }\n  };\n\n  signIn = () => {\n    const { emailAddress, password } = this.state;\n\n    const errors = validate({\n      emailAddress: emailAddress,\n      password: password\n    }, {\n      emailAddress: constraints.emailAddress,\n      password: constraints.password\n    });\n\n    if (errors) {\n      this.setState({\n        errors: errors\n      });\n    } else {\n      this.setState({\n        performingAction: true,\n\n        errors: null\n      }, () => {\n        authentication.signIn(emailAddress, password).then((value) => {\n          this.props.dialogProps.onClose(() => {\n            const user = value.user;\n            const displayName = user.displayName;\n            const emailAddress = user.email;\n\n            this.props.openSnackbar(`Signed in as ${displayName || emailAddress}`);\n          });\n        }).catch((reason) => {\n          const code = reason.code;\n          const message = reason.message;\n\n          switch (code) {\n            case 'auth/invalid-email':\n            case 'auth/user-disabled':\n            case 'auth/user-not-found':\n            case 'auth/wrong-password':\n              this.props.openSnackbar(message);\n              return;\n\n            default:\n              this.props.openSnackbar(message);\n              return;\n          }\n        }).finally(() => {\n          this.setState({\n            performingAction: false\n          });\n        });\n      });\n    }\n  };\n\n  signInWithAuthProvider = (providerId) => {\n    this.setState({\n      performingAction: true\n    }, () => {\n      authentication.signInWithAuthProvider(providerId).then((value) => {\n        this.props.dialogProps.onClose(() => {\n          const user = value.user;\n          const displayName = user.displayName;\n          const emailAddress = user.email;\n\n          this.props.openSnackbar(`Signed in as ${displayName || emailAddress}`);\n        });\n      }).catch((reason) => {\n        const code = reason.code;\n        const message = reason.message;\n\n        switch (code) {\n          case 'auth/account-exists-with-different-credential':\n          case 'auth/auth-domain-config-required':\n          case 'auth/cancelled-popup-request':\n          case 'auth/operation-not-allowed':\n          case 'auth/operation-not-supported-in-this-environment':\n          case 'auth/popup-blocked':\n          case 'auth/popup-closed-by-user':\n          case 'auth/unauthorized-domain':\n            this.props.openSnackbar(message);\n            return;\n\n          default:\n            this.props.openSnackbar(message);\n            return;\n        }\n      }).finally(() => {\n        this.setState({\n          performingAction: false\n        });\n      });\n    });\n  };\n\n  handleKeyPress = (event) => {\n    const { emailAddress, password } = this.state;\n\n    if (!emailAddress || !password) {\n      return;\n    }\n\n    const key = event.key;\n\n    if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey) {\n      return;\n    }\n\n    if (key === 'Enter') {\n      this.signIn();\n    }\n  };\n\n  handleExited = () => {\n    this.setState(initialState);\n  };\n\n  handleEmailAddressChange = (event) => {\n    const emailAddress = event.target.value;\n\n    this.setState({\n      emailAddress: emailAddress\n    });\n  };\n\n  handlePasswordChange = (event) => {\n    const password = event.target.value;\n\n    this.setState({\n      password: password\n    });\n  };\n\n  render() {\n    // Styling\n    const { classes } = this.props;\n\n    // Dialog Properties\n    const { dialogProps } = this.props;\n\n    const {\n      performingAction,\n\n      emailAddress,\n      password,\n\n      errors\n    } = this.state;\n\n    return (\n      <Dialog fullWidth maxWidth=\"sm\" {...dialogProps} onKeyPress={this.handleKeyPress} onExited={this.handleExited}>\n        <DialogTitle>\n          Sign in to your account\n        </DialogTitle>\n\n        <DialogContent>\n          <Hidden xsDown>\n            <Grid container direction=\"row\">\n              <Grid item xs={4}>\n                <AuthProviderList\n                  performingAction={performingAction}\n\n                  onAuthProviderClick={this.signInWithAuthProvider}\n                />\n              </Grid>\n\n              <Grid item xs={1}>\n                <Divider className={classes.divider} orientation=\"vertical\" />\n              </Grid>\n\n              <Grid item xs={7}>\n                <Grid container direction=\"column\" spacing={2}>\n                  <Grid item xs>\n                    <TextField\n                      autoComplete=\"email\"\n                      disabled={performingAction}\n                      error={!!(errors && errors.emailAddress)}\n                      fullWidth\n                      helperText={(errors && errors.emailAddress) ? errors.emailAddress[0] : ''}\n                      label=\"E-mail address\"\n                      placeholder=\"john@doe.com\"\n                      required\n                      type=\"email\"\n                      value={emailAddress}\n                      variant=\"outlined\"\n\n                      onChange={this.handleEmailAddressChange}\n                    />\n                  </Grid>\n\n                  <Grid item xs>\n                    <TextField\n                      autoComplete=\"current-password\"\n                      disabled={performingAction}\n                      error={!!(errors && errors.password)}\n                      fullWidth\n                      helperText={(errors && errors.password) ? errors.password[0] : ''}\n                      label=\"Password\"\n                      placeholder=\"&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;\"\n                      required\n                      type=\"password\"\n                      value={password}\n                      variant=\"outlined\"\n\n                      onChange={this.handlePasswordChange}\n                    />\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Hidden>\n\n          <Hidden smUp>\n            <AuthProviderList\n              gutterBottom\n              performingAction={performingAction}\n\n              onAuthProviderClick={this.signInWithAuthProvider}\n            />\n\n            <Grid container direction=\"column\" spacing={2}>\n              <Grid item xs>\n                <TextField\n                  autoComplete=\"email\"\n                  disabled={performingAction}\n                  error={!!(errors && errors.emailAddress)}\n                  fullWidth\n                  helperText={(errors && errors.emailAddress) ? errors.emailAddress[0] : ''}\n                  label=\"E-mail address\"\n                  placeholder=\"john@doe.com\"\n                  required\n                  type=\"email\"\n                  value={emailAddress}\n                  variant=\"outlined\"\n\n                  onChange={this.handleEmailAddressChange}\n                />\n              </Grid>\n\n              <Grid item xs>\n                <TextField\n                  autoComplete=\"current-password\"\n                  disabled={performingAction}\n                  error={!!(errors && errors.password)}\n                  fullWidth\n                  helperText={(errors && errors.password) ? errors.password[0] : ''}\n                  label=\"Password\"\n                  placeholder=\"&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;\"\n                  required\n                  type=\"password\"\n                  value={password}\n                  variant=\"outlined\"\n\n                  onChange={this.handlePasswordChange}\n                />\n              </Grid>\n            </Grid>\n          </Hidden>\n        </DialogContent>\n\n        <DialogActions>\n          <Button color=\"primary\" onClick={dialogProps.onClose}>Cancel</Button>\n\n          <Button\n            color=\"primary\"\n            disabled={!emailAddress || performingAction}\n            variant=\"outlined\"\n\n            onClick={this.resetPassword}>\n            Reset password\n          </Button>\n\n          <Button\n            color=\"primary\"\n            disabled={(!emailAddress || !password) || performingAction}\n            variant=\"contained\"\n\n            onClick={this.signIn}>\n            Sign in\n          </Button>\n        </DialogActions>\n      </Dialog>\n    );\n  }\n}\n\nSignInDialog.propTypes = {\n  // Styling\n  classes: PropTypes.object.isRequired,\n\n  // Dialog Properties\n  dialogProps: PropTypes.object.isRequired,\n\n  // Custom Functions\n  openSnackbar: PropTypes.func.isRequired\n};\n\nexport default withStyles(styles)(SignInDialog);\n"]},"metadata":{},"sourceType":"module"}
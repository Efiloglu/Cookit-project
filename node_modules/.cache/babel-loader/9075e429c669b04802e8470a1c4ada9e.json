{"ast":null,"code":"import _ from 'lodash';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport red from '@material-ui/core/colors/red';\nimport pink from '@material-ui/core/colors/pink';\nimport purple from '@material-ui/core/colors/purple';\nimport deepPurple from '@material-ui/core/colors/deepPurple';\nimport indigo from '@material-ui/core/colors/indigo';\nimport blue from '@material-ui/core/colors/blue';\nimport lightBlue from '@material-ui/core/colors/lightBlue';\nimport cyan from '@material-ui/core/colors/cyan';\nimport teal from '@material-ui/core/colors/teal';\nimport green from '@material-ui/core/colors/green';\nimport lightGreen from '@material-ui/core/colors/lightGreen';\nimport lime from '@material-ui/core/colors/lime';\nimport yellow from '@material-ui/core/colors/yellow';\nimport amber from '@material-ui/core/colors/amber';\nimport orange from '@material-ui/core/colors/orange';\nimport deepOrange from '@material-ui/core/colors/deepOrange';\nimport brown from '@material-ui/core/colors/brown';\nimport gray from '@material-ui/core/colors/grey';\nimport blueGray from '@material-ui/core/colors/blueGrey';\nimport firebase, { analytics, auth, firestore } from '../firebase';\nconst colors = {\n  red: {\n    id: 'red',\n    name: 'Red',\n    import: red\n  },\n  pink: {\n    id: 'pink',\n    name: 'Pink',\n    import: pink\n  },\n  purple: {\n    id: 'purple',\n    name: 'Purple',\n    import: purple\n  },\n  deepPurple: {\n    id: 'deep-purple',\n    name: 'Deep Purple',\n    import: deepPurple\n  },\n  indigo: {\n    id: 'indigo',\n    name: 'Indigo',\n    import: indigo\n  },\n  blue: {\n    id: 'blue',\n    name: 'Blue',\n    import: blue\n  },\n  lightBlue: {\n    id: 'light-blue',\n    name: 'Light Blue',\n    import: lightBlue\n  },\n  cyan: {\n    id: 'cyan',\n    name: 'Cyan',\n    import: cyan\n  },\n  teal: {\n    id: 'teal',\n    name: 'Teal',\n    import: teal\n  },\n  green: {\n    id: 'green',\n    name: 'Green',\n    import: green\n  },\n  lightGreen: {\n    id: 'light-green',\n    name: 'Light Green',\n    import: lightGreen\n  },\n  lime: {\n    id: 'lime',\n    name: 'Lime',\n    import: lime\n  },\n  yellow: {\n    id: 'yellow',\n    name: 'Yellow',\n    import: yellow\n  },\n  amber: {\n    id: 'amber',\n    name: 'Amber',\n    import: amber\n  },\n  orange: {\n    id: 'orange',\n    name: 'Orange',\n    import: orange\n  },\n  deepOrange: {\n    id: 'deep-orange',\n    name: 'Deep Orange',\n    import: deepOrange\n  },\n  brown: {\n    id: 'brown',\n    name: 'Brown',\n    import: brown\n  },\n  gray: {\n    id: 'gray',\n    name: 'Gray',\n    import: gray\n  },\n  blueGray: {\n    id: 'blue-gray',\n    name: 'Blue Gray',\n    import: blueGray\n  }\n};\nconst types = {\n  light: {\n    id: 'light',\n    name: 'Light'\n  },\n  dark: {\n    id: 'dark',\n    name: 'Dark'\n  }\n};\n\nconst getColor = colorId => {\n  if (!colorId) {\n    return null;\n  }\n\n  colorId = _.camelCase(colorId);\n  return colors[colorId];\n};\n\nconst getType = typeId => {\n  if (!typeId) {\n    return null;\n  }\n\n  return types[typeId];\n};\n\nconst defaultPrimaryColor = getColor(process.env.REACT_APP_THEME_PRIMARY_COLOR);\nconst defaultSecondaryColor = getColor(process.env.REACT_APP_THEME_SECONDARY_COLOR);\nconst defaultType = getType(process.env.REACT_APP_THEME_TYPE);\nconst defaultTheme = createMuiTheme({\n  palette: {\n    primary: defaultPrimaryColor.import,\n    secondary: defaultSecondaryColor.import,\n    type: defaultType.id\n  },\n  primaryColor: defaultPrimaryColor,\n  secondaryColor: defaultSecondaryColor,\n  type: defaultType\n});\nconst theming = {};\ntheming.colors = colors;\ntheming.types = types;\ntheming.defaultPrimaryColor = defaultPrimaryColor;\ntheming.defaultSecondaryColor = defaultSecondaryColor;\ntheming.defaultType = defaultType;\ntheming.defaultTheme = defaultTheme;\n/**\n * Returns whether a theme is the default theme.\n * @param theme\n * @returns {boolean}\n */\n\ntheming.isDefaultTheme = theme => {\n  if (!theme) {\n    return false;\n  }\n\n  if (theme.primaryColor.id === defaultPrimaryColor.id && theme.secondaryColor.id === defaultSecondaryColor.id && theme.type.id === defaultType.id) {\n    return true;\n  }\n\n  return false;\n};\n/**\n * Creates a Material-UI theme from a JSON theme object.\n * @param theme\n * @returns {null|Theme}\n */\n\n\ntheming.createTheme = theme => {\n  if (!theme) {\n    return null;\n  }\n\n  let primaryColor = theme.primaryColor;\n  let secondaryColor = theme.secondaryColor;\n  let type = theme.type;\n\n  if (!primaryColor || !secondaryColor || !type) {\n    return null;\n  }\n\n  primaryColor = getColor(primaryColor);\n  secondaryColor = getColor(secondaryColor);\n  type = getType(type);\n\n  if (!primaryColor || !secondaryColor || !type) {\n    return null;\n  }\n\n  theme = createMuiTheme({\n    palette: {\n      primary: primaryColor.import,\n      secondary: secondaryColor.import,\n      type: type.id\n    },\n    primaryColor: primaryColor,\n    secondaryColor: secondaryColor,\n    type: type\n  });\n  return theme;\n};\n/**\n * Changes the theme for the current user.\n * @param theme\n * @returns {Promise<unknown>}\n */\n\n\ntheming.changeTheme = theme => {\n  return new Promise((resolve, reject) => {\n    if (!theme) {\n      reject();\n      return;\n    }\n\n    let primaryColor = theme.primaryColor;\n    let secondaryColor = theme.secondaryColor;\n    let type = theme.type;\n\n    if (!primaryColor || !secondaryColor || !type) {\n      reject();\n      return;\n    }\n\n    primaryColor = getColor(primaryColor);\n    secondaryColor = getColor(secondaryColor);\n    type = getType(type);\n\n    if (!primaryColor || !secondaryColor || !type) {\n      reject();\n      return;\n    }\n\n    const currentUser = auth.currentUser;\n\n    if (!currentUser) {\n      reject();\n      return;\n    }\n\n    const uid = currentUser.uid;\n\n    if (!uid) {\n      reject();\n      return;\n    }\n\n    const reference = firestore.collection('users').doc(uid);\n\n    if (!reference) {\n      reject();\n      return;\n    }\n\n    reference.update({\n      theme: {\n        primaryColor: primaryColor.id,\n        secondaryColor: secondaryColor.id,\n        type: type.id\n      }\n    }).then(value => {\n      analytics.logEvent('change_theme', {\n        value: {\n          primaryColor: primaryColor.id,\n          secondaryColor: secondaryColor.id,\n          type: type.id\n        }\n      });\n      resolve(value);\n    }).catch(reason => {\n      reject(reason);\n    });\n  });\n};\n/**\n * Changes the primary color for the current user.\n * @param primaryColor\n * @returns {Promise<unknown>}\n */\n\n\ntheming.changePrimaryColor = primaryColor => {\n  return new Promise((resolve, reject) => {\n    if (!primaryColor) {\n      reject();\n      return;\n    }\n\n    primaryColor = getColor(primaryColor);\n\n    if (!primaryColor) {\n      reject();\n      return;\n    }\n\n    const currentUser = auth.currentUser;\n\n    if (!currentUser) {\n      reject();\n      return;\n    }\n\n    const uid = currentUser.uid;\n\n    if (!uid) {\n      reject();\n      return;\n    }\n\n    const reference = firestore.collection('users').doc(uid);\n\n    if (!reference) {\n      reject();\n      return;\n    }\n\n    reference.update({\n      'theme.primaryColor': primaryColor.id\n    }).then(value => {\n      analytics.logEvent('change_primary_color', {\n        value: primaryColor.id\n      });\n      resolve(value);\n    }).catch(reason => {\n      reject(reason);\n    });\n  });\n};\n/**\n * Changes the secondary color for the current user.\n * @param secondaryColor\n * @returns {Promise<unknown>}\n */\n\n\ntheming.changeSecondaryColor = secondaryColor => {\n  return new Promise((resolve, reject) => {\n    if (!secondaryColor) {\n      reject();\n      return;\n    }\n\n    secondaryColor = getColor(secondaryColor);\n\n    if (!secondaryColor) {\n      reject();\n      return;\n    }\n\n    const currentUser = auth.currentUser;\n\n    if (!currentUser) {\n      reject();\n      return;\n    }\n\n    const uid = currentUser.uid;\n\n    if (!uid) {\n      reject();\n      return;\n    }\n\n    const reference = firestore.collection('users').doc(uid);\n\n    if (!reference) {\n      reject();\n      return;\n    }\n\n    reference.update({\n      'theme.secondaryColor': secondaryColor.id\n    }).then(value => {\n      analytics.logEvent('change_secondary_color', {\n        value: secondaryColor.id\n      });\n      resolve(value);\n    }).catch(reason => {\n      reject(reason);\n    });\n  });\n};\n/**\n * Changes the type for the current user.\n * @param type\n * @returns {Promise<unknown>}\n */\n\n\ntheming.changeType = type => {\n  return new Promise((resolve, reject) => {\n    if (!type) {\n      reject();\n      return;\n    }\n\n    type = getType(type);\n\n    if (!type) {\n      reject();\n      return;\n    }\n\n    const currentUser = auth.currentUser;\n\n    if (!currentUser) {\n      reject();\n      return;\n    }\n\n    const uid = currentUser.uid;\n\n    if (!uid) {\n      reject();\n      return;\n    }\n\n    const reference = firestore.collection('users').doc(uid);\n\n    if (!reference) {\n      reject();\n      return;\n    }\n\n    reference.update({\n      'theme.type': type.id\n    }).then(value => {\n      analytics.logEvent('change_type', {\n        value: type.id\n      });\n      resolve(value);\n    }).catch(reason => {\n      reject(reason);\n    });\n  });\n};\n/**\n * Resets the theme for the current user.\n * @returns {Promise<unknown>}\n */\n\n\ntheming.resetTheme = () => {\n  return new Promise((resolve, reject) => {\n    const currentUser = auth.currentUser;\n\n    if (!currentUser) {\n      reject();\n      return;\n    }\n\n    const uid = currentUser.uid;\n\n    if (!uid) {\n      reject();\n      return;\n    }\n\n    const reference = firestore.collection('users').doc(uid);\n\n    if (!reference) {\n      reject();\n      return;\n    }\n\n    reference.update({\n      theme: firebase.firestore.FieldValue.delete()\n    }).then(value => {\n      analytics.logEvent('reset_theme');\n      resolve(value);\n    }).catch(reason => {\n      reject(reason);\n    });\n  });\n};\n\nexport default theming;","map":{"version":3,"sources":["/home/hyfbe32/cookit-auth/src/services/theming.js"],"names":["_","createMuiTheme","red","pink","purple","deepPurple","indigo","blue","lightBlue","cyan","teal","green","lightGreen","lime","yellow","amber","orange","deepOrange","brown","gray","blueGray","firebase","analytics","auth","firestore","colors","id","name","import","types","light","dark","getColor","colorId","camelCase","getType","typeId","defaultPrimaryColor","process","env","REACT_APP_THEME_PRIMARY_COLOR","defaultSecondaryColor","REACT_APP_THEME_SECONDARY_COLOR","defaultType","REACT_APP_THEME_TYPE","defaultTheme","palette","primary","secondary","type","primaryColor","secondaryColor","theming","isDefaultTheme","theme","createTheme","changeTheme","Promise","resolve","reject","currentUser","uid","reference","collection","doc","update","then","value","logEvent","catch","reason","changePrimaryColor","changeSecondaryColor","changeType","resetTheme","FieldValue","delete"],"mappings":"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","sourcesContent":["import _ from 'lodash';\n\nimport { createMuiTheme } from '@material-ui/core/styles';\n\nimport red from '@material-ui/core/colors/red';\nimport pink from '@material-ui/core/colors/pink';\nimport purple from '@material-ui/core/colors/purple';\nimport deepPurple from '@material-ui/core/colors/deepPurple';\nimport indigo from '@material-ui/core/colors/indigo';\nimport blue from '@material-ui/core/colors/blue';\nimport lightBlue from '@material-ui/core/colors/lightBlue';\nimport cyan from '@material-ui/core/colors/cyan';\nimport teal from '@material-ui/core/colors/teal';\nimport green from '@material-ui/core/colors/green';\nimport lightGreen from '@material-ui/core/colors/lightGreen';\nimport lime from '@material-ui/core/colors/lime';\nimport yellow from '@material-ui/core/colors/yellow';\nimport amber from '@material-ui/core/colors/amber';\nimport orange from '@material-ui/core/colors/orange';\nimport deepOrange from '@material-ui/core/colors/deepOrange';\nimport brown from '@material-ui/core/colors/brown';\nimport gray from '@material-ui/core/colors/grey';\nimport blueGray from '@material-ui/core/colors/blueGrey';\n\nimport firebase, { analytics, auth, firestore } from '../firebase';\n\nconst colors = {\n  red: {\n    id: 'red',\n    name: 'Red',\n    import: red\n  },\n\n  pink: {\n    id: 'pink',\n    name: 'Pink',\n    import: pink\n  },\n\n  purple: {\n    id: 'purple',\n    name: 'Purple',\n    import: purple\n  },\n\n  deepPurple: {\n    id: 'deep-purple',\n    name: 'Deep Purple',\n    import: deepPurple\n  },\n\n  indigo: {\n    id: 'indigo',\n    name: 'Indigo',\n    import: indigo\n  },\n\n  blue: {\n    id: 'blue',\n    name: 'Blue',\n    import: blue\n  },\n\n  lightBlue: {\n    id: 'light-blue',\n    name: 'Light Blue',\n    import: lightBlue\n  },\n\n  cyan: {\n    id: 'cyan',\n    name: 'Cyan',\n    import: cyan\n  },\n\n  teal: {\n    id: 'teal',\n    name: 'Teal',\n    import: teal\n  },\n\n  green: {\n    id: 'green',\n    name: 'Green',\n    import: green\n  },\n\n  lightGreen: {\n    id: 'light-green',\n    name: 'Light Green',\n    import: lightGreen\n  },\n\n  lime: {\n    id: 'lime',\n    name: 'Lime',\n    import: lime\n  },\n\n  yellow: {\n    id: 'yellow',\n    name: 'Yellow',\n    import: yellow\n  },\n\n  amber: {\n    id: 'amber',\n    name: 'Amber',\n    import: amber\n  },\n\n  orange: {\n    id: 'orange',\n    name: 'Orange',\n    import: orange\n  },\n\n  deepOrange: {\n    id: 'deep-orange',\n    name: 'Deep Orange',\n    import: deepOrange\n  },\n\n  brown: {\n    id: 'brown',\n    name: 'Brown',\n    import: brown\n  },\n\n  gray: {\n    id: 'gray',\n    name: 'Gray',\n    import: gray\n  },\n\n  blueGray: {\n    id: 'blue-gray',\n    name: 'Blue Gray',\n    import: blueGray\n  }\n};\n\nconst types = {\n  light: {\n    id: 'light',\n    name: 'Light'\n  },\n\n  dark: {\n    id: 'dark',\n    name: 'Dark'\n  }\n};\n\nconst getColor = (colorId) => {\n  if (!colorId) {\n    return null;\n  }\n\n  colorId = _.camelCase(colorId);\n\n  return colors[colorId];\n};\n\nconst getType = (typeId) => {\n  if (!typeId) {\n    return null;\n  }\n\n  return types[typeId];\n};\n\nconst defaultPrimaryColor = getColor(process.env.REACT_APP_THEME_PRIMARY_COLOR);\nconst defaultSecondaryColor = getColor(process.env.REACT_APP_THEME_SECONDARY_COLOR);\nconst defaultType = getType(process.env.REACT_APP_THEME_TYPE);\n\nconst defaultTheme = createMuiTheme({\n  palette: {\n    primary: defaultPrimaryColor.import,\n    secondary: defaultSecondaryColor.import,\n    type: defaultType.id\n  },\n\n  primaryColor: defaultPrimaryColor,\n  secondaryColor: defaultSecondaryColor,\n  type: defaultType\n});\n\nconst theming = {};\n\ntheming.colors = colors;\ntheming.types = types;\n\ntheming.defaultPrimaryColor = defaultPrimaryColor;\ntheming.defaultSecondaryColor = defaultSecondaryColor;\ntheming.defaultType = defaultType;\n\ntheming.defaultTheme = defaultTheme;\n\n/**\n * Returns whether a theme is the default theme.\n * @param theme\n * @returns {boolean}\n */\ntheming.isDefaultTheme = (theme) => {\n  if (!theme) {\n    return false;\n  }\n\n  if (theme.primaryColor.id === defaultPrimaryColor.id &&\n      theme.secondaryColor.id === defaultSecondaryColor.id &&\n      theme.type.id === defaultType.id) {\n    return true;\n  }\n\n  return false;\n};\n\n/**\n * Creates a Material-UI theme from a JSON theme object.\n * @param theme\n * @returns {null|Theme}\n */\ntheming.createTheme = (theme) => {\n  if (!theme) {\n    return null;\n  }\n\n  let primaryColor = theme.primaryColor;\n  let secondaryColor = theme.secondaryColor;\n  let type = theme.type;\n\n  if (!primaryColor || !secondaryColor || !type) {\n    return null;\n  }\n\n  primaryColor = getColor(primaryColor);\n  secondaryColor = getColor(secondaryColor);\n  type = getType(type);\n\n  if (!primaryColor || !secondaryColor || !type) {\n    return null;\n  }\n\n  theme = createMuiTheme({\n    palette: {\n      primary: primaryColor.import,\n      secondary: secondaryColor.import,\n      type: type.id\n    },\n\n    primaryColor: primaryColor,\n    secondaryColor: secondaryColor,\n    type: type\n  });\n\n  return theme;\n};\n\n/**\n * Changes the theme for the current user.\n * @param theme\n * @returns {Promise<unknown>}\n */\ntheming.changeTheme = (theme) => {\n  return new Promise((resolve, reject) => {\n    if (!theme) {\n      reject();\n\n      return;\n    }\n\n    let primaryColor = theme.primaryColor;\n    let secondaryColor = theme.secondaryColor;\n    let type = theme.type;\n\n    if (!primaryColor || !secondaryColor || !type) {\n      reject();\n\n      return;\n    }\n\n    primaryColor = getColor(primaryColor);\n    secondaryColor = getColor(secondaryColor);\n    type = getType(type);\n\n    if (!primaryColor || !secondaryColor || !type) {\n      reject();\n\n      return;\n    }\n\n    const currentUser = auth.currentUser;\n\n    if (!currentUser) {\n      reject();\n\n      return;\n    }\n\n    const uid = currentUser.uid;\n\n    if (!uid) {\n      reject();\n\n      return;\n    }\n\n    const reference = firestore.collection('users').doc(uid);\n\n    if (!reference) {\n      reject();\n\n      return;\n    }\n\n    reference.update({\n      theme: {\n        primaryColor: primaryColor.id,\n        secondaryColor: secondaryColor.id,\n        type: type.id\n      }\n    }).then((value) => {\n      analytics.logEvent('change_theme', {\n        value: {\n          primaryColor: primaryColor.id,\n          secondaryColor: secondaryColor.id,\n          type: type.id\n        }\n      });\n\n      resolve(value);\n    }).catch((reason) => {\n      reject(reason);\n    });\n  });\n};\n\n/**\n * Changes the primary color for the current user.\n * @param primaryColor\n * @returns {Promise<unknown>}\n */\ntheming.changePrimaryColor = (primaryColor) => {\n  return new Promise((resolve, reject) => {\n    if (!primaryColor) {\n      reject();\n\n      return;\n    }\n\n    primaryColor = getColor(primaryColor);\n\n    if (!primaryColor) {\n      reject();\n\n      return;\n    }\n\n    const currentUser = auth.currentUser;\n\n    if (!currentUser) {\n      reject();\n\n      return;\n    }\n\n    const uid = currentUser.uid;\n\n    if (!uid) {\n      reject();\n\n      return;\n    }\n\n    const reference = firestore.collection('users').doc(uid);\n\n    if (!reference) {\n      reject();\n\n      return;\n    }\n\n    reference.update({\n      'theme.primaryColor': primaryColor.id\n    }).then((value) => {\n      analytics.logEvent('change_primary_color', {\n        value: primaryColor.id\n      });\n\n      resolve(value);\n    }).catch((reason) => {\n      reject(reason);\n    });\n  });\n};\n\n/**\n * Changes the secondary color for the current user.\n * @param secondaryColor\n * @returns {Promise<unknown>}\n */\ntheming.changeSecondaryColor = (secondaryColor) => {\n  return new Promise((resolve, reject) => {\n    if (!secondaryColor) {\n      reject();\n\n      return;\n    }\n\n    secondaryColor = getColor(secondaryColor);\n\n    if (!secondaryColor) {\n      reject();\n\n      return;\n    }\n\n    const currentUser = auth.currentUser;\n\n    if (!currentUser) {\n      reject();\n\n      return;\n    }\n\n    const uid = currentUser.uid;\n\n    if (!uid) {\n      reject();\n\n      return;\n    }\n\n    const reference = firestore.collection('users').doc(uid);\n\n    if (!reference) {\n      reject();\n\n      return;\n    }\n\n    reference.update({\n      'theme.secondaryColor': secondaryColor.id\n    }).then((value) => {\n      analytics.logEvent('change_secondary_color', {\n        value: secondaryColor.id\n      });\n\n      resolve(value);\n    }).catch((reason) => {\n      reject(reason);\n    });\n  });\n};\n\n/**\n * Changes the type for the current user.\n * @param type\n * @returns {Promise<unknown>}\n */\ntheming.changeType = (type) => {\n  return new Promise((resolve, reject) => {\n    if (!type) {\n      reject();\n\n      return;\n    }\n\n    type = getType(type);\n\n    if (!type) {\n      reject();\n\n      return;\n    }\n\n    const currentUser = auth.currentUser;\n\n    if (!currentUser) {\n      reject();\n\n      return;\n    }\n\n    const uid = currentUser.uid;\n\n    if (!uid) {\n      reject();\n\n      return;\n    }\n\n    const reference = firestore.collection('users').doc(uid);\n\n    if (!reference) {\n      reject();\n\n      return;\n    }\n\n    reference.update({\n      'theme.type': type.id\n    }).then((value) => {\n      analytics.logEvent('change_type', {\n        value: type.id\n      });\n\n      resolve(value);\n    }).catch((reason) => {\n      reject(reason);\n    });\n  });\n};\n\n/**\n * Resets the theme for the current user.\n * @returns {Promise<unknown>}\n */\ntheming.resetTheme = () => {\n  return new Promise((resolve, reject) => {\n    const currentUser = auth.currentUser;\n\n    if (!currentUser) {\n      reject();\n\n      return;\n    }\n\n    const uid = currentUser.uid;\n\n    if (!uid) {\n      reject();\n\n      return;\n    }\n\n    const reference = firestore.collection('users').doc(uid);\n\n    if (!reference) {\n      reject();\n\n      return;\n    }\n\n    reference.update({\n      theme: firebase.firestore.FieldValue.delete()\n    }).then((value) => {\n      analytics.logEvent('reset_theme');\n\n      resolve(value);\n    }).catch((reason) => {\n      reject(reason);\n    });\n  });\n};\n\nexport default theming;\n"]},"metadata":{},"sourceType":"module"}